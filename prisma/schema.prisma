// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Pet {
//   id String @id @default(uuid())
//   name String
//   slug String
//   imageUrl String
//   backgroundURL String
//   description String
//   gender String
//   species String
//   posts Post[]

// // reference to user
//   userId   String
//   user     User   @relation(fields: [userId], references: [id])
// }

model Pet {
  id String @id @default(uuid())
  name String
  slug String
  imageUrl String
  backgroundURL String
  description String
  gender String
  species String
  posts Post[]
  followers Pet[] @relation("PetFollowers", map: "followers")
  following Pet[] @relation("PetFollowing", map: "following")

  // reference to user
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  // Add this field for the opposite relation
  followersOf Pet[] @relation("PetFollowers", map: "followersOf")
  followingOf Pet[] @relation("PetFollowing", map: "followingOf")
}

model Post {
  id String @id @default(uuid())
  text String
  namePet String
  imageUrl String
  slug String
  likes Int @default(0)
  comments Comment[]
  createdAt DateTime @default(now())

  // reference to pet
  pet     Pet   @relation(fields: [petId], references: [id])
  petId String
}

model Comment {
  id String @id @default(uuid())
  text String
  createdAt DateTime @default(now())

  post     Post   @relation(fields: [postId], references: [id])
  postId String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pets Pet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}